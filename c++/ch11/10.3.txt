// clarray.cpp
// creates array class
#include <iostream>
using namespace std;
////////////////////////////////////////////////////////////////
class Array //models a normal C++ array
{
private:
	int* ptr; //pointer to Array contents
	int size; //size of Array
public:
	Array(int s) //one-argument constructor
	{
		size = s; //argument is size of Array
		ptr = new int[s]; //make space for Array
	}
	Array(Array & arr2)
	{
		size = arr2.size;
		arr2.ptr = new int[size];
			for (int i = 0; i < size; i++)
				*(ptr + i) = *(arr2.ptr + i);
		
	}
	~Array() //destructor
	{
		delete[] ptr;
	}
	int& operator [] (int j) //overloaded subscript operator
	{
		return *(ptr + j);
	}
	Array& operator = (Array& arr2)
	{
		if (size != arr2.size)
		{
			cout << "Error missmatch size !";
		}
		else
		{
			for (int i = 0; i < size; i++)
				*(ptr + i) = *(arr2.ptr + i);
		}
		return *this;
	}
};
////////////////////////////////////////////////////////////////
int main()
{
	const int ASIZE = 10; //size of array
	Array arr(ASIZE); //make an array
	Array arr2(ASIZE);
	Array arr3 (ASIZE);

	for (int j = 0; j < ASIZE; j++) //fill it with squares
		arr[j] = j * j;
	/*arr2=arr;*/
	//Array arr2(arr);
	for (int j = 0; j < ASIZE; j++) //display its contents
		cout << arr2[j] << ' ';
	cout << endl;

	return 0;
}